version: '3'

# This docker-compose.yml file defines services to run on the developer's machine,
# and is NOT intended to be used in a production environment.

services:
  # NPM package publisher:
  npm-publish:
    build: ./infrastructure/development/containers/npm-publish
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-publish.env
    volumes:
      - ./packages:/packages
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Client live-server (React):
  client:
    build: ./infrastructure/development/containers/npm-start
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-start-client.env
    environment:
      - "DO_NOT_RESTART=yes"
      - "PROBE_UPDATES=@app/drivers"
    expose:
      - 80
    volumes:
      - "./packages/client:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:80/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Client build (React):
  client-build:
    build: ./infrastructure/development/containers/npm-build
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-build-client.env
    volumes:
      - "./packages/client:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # WebAPI container (Express.js):
  api-v1:
    build: ./infrastructure/development/containers/npm-start
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-start-api-v1.env
    environment:
      - "PROBE_UPDATES=@app/drivers @app/jobs"
    expose:
      - 80
    volumes:
      - "./packages/api-v1:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Jobs container (Node.js):
  jobs:
    build: ./infrastructure/development/containers/npm-start
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-start-jobs.env
    environment:
      - "PROBE_UPDATES=@app/drivers"
    volumes:
      - "./packages/jobs:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Login container (Express.js + Passport.js):
  login:
    build: ./infrastructure/development/containers/npm-start
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-start-login.env
    environment:
      - "PROBE_UPDATES=@app/drivers"
    volumes:
      - "./packages/login:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Views container (Express.js):
  views:
    build: ./infrastructure/development/containers/npm-start
    env_file:
      - ./.env
      - ./infrastructure/development/environment/npm-start-views.env
    environment:
      - "PROBE_UPDATES=@app/drivers"
    volumes:
      - "./packages/views:/workdir"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Ingress reverse proxy (Traefik):
  traefik:
    build: ./infrastructure/development/containers/traefik
    env_file:
      - ./.env
      - ./infrastructure/development/environment/traefik.env
    volumes:
      - "./infrastructure/development/configuration/traefik/local.cert:/etc/traefik/local.cert"
      - "./infrastructure/development/configuration/traefik/local.key:/etc/traefik/local.key"
      - "./infrastructure/development/configuration/traefik/dynamic_conf.yml:/etc/traefik/dynamic_conf.yml"
      - "./infrastructure/development/configuration/traefik/traefik.yml:/etc/traefik/traefik.yml"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:80/ping >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # NPM repository (Verdaccio):
  verdaccio:
    build: ./infrastructure/development/containers/verdaccio
    env_file:
      - ./.env
      - ./infrastructure/development/environment/verdaccio.env
    volumes:
      - "./infrastructure/development/configuration/verdaccio/config.yaml:/verdaccio/conf/config.yaml"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4873/-/ping >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # SQL database (Postgres):
  postgres:
    build: ./infrastructure/development/containers/postgres
    env_file:
      - ./.env
      - ./infrastructure/development/environment/postgres.env
    volumes:
      - "postgres-data:/var/lib/postgresql/data"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: pg_isready -U postgres_user -d application >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Postgres prometheus metrics exporter:
  postgres-metrics:
    build: ./infrastructure/development/containers/postgres-metrics
    env_file:
      - ./.env
      - ./infrastructure/development/environment/postgres-metrics.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:9187/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # OLAP database (ClickHouse):
  clickhouse:
    build: ./infrastructure/development/containers/clickhouse
    env_file:
      - ./.env
      - ./infrastructure/development/environment/clickhouse.env
    volumes:
      - "clickhouse-data:/var/lib/clickhouse"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8123/ping >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Message broker (RabbitMQ):
  rabbitmq:
    build: ./infrastructure/development/containers/rabbitmq
    env_file:
      - ./.env
      - ./infrastructure/development/environment/rabbitmq.env
    volumes:
      - "rabbitmq-data:/var/lib/rabbitmq"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # RabbitMQ metrics exporter:
  rabbitmq-metrics:
    build: ./infrastructure/development/containers/rabbitmq-metrics
    env_file:
      - ./.env
      - ./infrastructure/development/environment/rabbitmq-metrics.env
    networks:
      - dev_machine_network
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Document-oriented database (Mongo):
  mongo:
    build: ./infrastructure/development/containers/mongo
    env_file:
      - ./.env
      - ./infrastructure/development/environment/mongo.env
    volumes:
      - "mongo-data:/data/db"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')" || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Mongo metrics exporter:
  mongo-metrics:
    build: ./infrastructure/development/containers/mongo-metrics
    env_file:
      - ./.env
      - ./infrastructure/development/environment/mongo-metrics.env
    command: ["--mongodb.uri=mongodb://mongo:17001"]
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:9216/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Object storage engine (Minio):
  minio:
    build: ./infrastructure/development/containers/minio
    env_file:
      - ./.env
      - ./infrastructure/development/environment/minio.env
    volumes:
      - "minio-data:/data"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: curl --silent --fail http://localhost:9001/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Key-value storage (Redis):
  redis:
    build: ./infrastructure/development/containers/redis
    env_file:
      - ./.env
      - ./infrastructure/development/environment/redis.env
    volumes:
      - "redis-data:/data"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: redis-cli ping >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Redis metrics exporter:
  redis-metrics:
    build: ./infrastructure/development/containers/redis-metrics
    env_file:
      - ./.env
      - ./infrastructure/development/environment/redis-metrics.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:9121/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # SQL administration interface (Adminer):
  adminer:
    build: ./infrastructure/development/containers/adminer
    env_file:
      - ./.env
      - ./infrastructure/development/environment/adminer.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8080/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Mongo administration interface (Mongo Express):
  mongo-express:
    build: ./infrastructure/development/containers/mongo-express
    env_file:
      - ./.env
      - ./infrastructure/development/environment/mongo-express.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8081/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Search engine (OpenSearch):
  opensearch:
    build: ./infrastructure/development/containers/opensearch
    env_file:
      - ./.env
      - ./infrastructure/development/environment/opensearch.env
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: curl --silent --fail https://localhost:9200 -ku 'admin:admin' >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
  # Opensearch dashboard:
  opensearch-dashboards:
    build: ./infrastructure/development/containers/opensearch-dashboards
    env_file:
      - ./.env
      - ./infrastructure/development/environment/opensearch-dashboards.env
    networks:
      - dev_machine_network
    restart: always
    #healthcheck:
    #  test: wget -q --spider http://localhost:3000/api/health >/dev/null || exit 1
    #  interval: 10s
    #  timeout: 5s
    #  retries: 3
    #  start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Business intelligence tool (Metabase):
  metabase:
    build: ./infrastructure/development/containers/metabase
    env_file:
      - ./.env
      - ./infrastructure/development/environment/metabase.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: curl --silent --fail http://localhost:3000/api/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Time-series and realtime data visualization tool (Grafana):
  grafana:
    build: ./infrastructure/development/containers/grafana
    env_file:
      - ./.env
      - ./infrastructure/development/environment/grafana.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:3000/api/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Log aggregation system (Loki):
  loki:
    build: ./infrastructure/development/containers/loki
    env_file:
      - ./.env
      - ./infrastructure/development/environment/loki.env
    volumes:
      - "./infrastructure/development/configuration/loki/loki-config.yaml:/etc/loki/loki-config.yaml"
      - "loki-data:/loki"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:3100/ready >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Monitoring system & time series database (Prometheus):
  prometheus:
    build: ./infrastructure/development/containers/prometheus
    env_file:
      - ./.env
      - ./infrastructure/development/environment/prometheus.env
    volumes:
      - "./infrastructure/development/configuration/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:9090/-/healthy >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Metrics backend (Mimir):
  mimir:
    build: ./infrastructure/development/containers/mimir
    env_file:
      - ./.env
      - ./infrastructure/development/environment/mimir.env
    command: ["--config.file=/etc/mimir.yaml"]
    volumes:
      - "./infrastructure/development/configuration/mimir/mimir.yaml:/etc/mimir.yaml"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:9009/ready >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Distributed tracing backend (Tempo):
  tempo:
    build: ./infrastructure/development/containers/tempo
    env_file:
      - ./.env
      - ./infrastructure/development/environment/tempo.env
    volumes:
      - "./infrastructure/development/configuration/tempo/tempo.yaml:/etc/tempo/tempo.yaml"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:9411/ready >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # API auto-documentation (Swagger):
  swagger:
    build: ./infrastructure/development/containers/swagger
    env_file:
      - ./.env
      - ./infrastructure/development/environment/swagger.env
    volumes:
      - "./packages:/packages:ro"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:80/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Remote terminal app (xterm.js):
  xterm:
    build: ./infrastructure/development/containers/xterm
    env_file:
      - ./.env
      - ./infrastructure/development/environment/xterm.env
    volumes:
      - ".:/application"
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:80/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Service management (Consul):
  consul:
    build: ./infrastructure/development/containers/consul
    env_file:
      - ./.env
      - ./infrastructure/development/environment/consul.env
    networks:
      - dev_machine_network
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8500/ >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Service management configuration import (Consul):
  consul-kv-import:
    build: ./infrastructure/development/containers/consul
    env_file:
      - ./.env
      - ./infrastructure/development/environment/consul.env
      - ./infrastructure/development/environment/postgres.env
      - ./infrastructure/development/environment/clickhouse.env
      - ./infrastructure/development/environment/mongo.env
      - ./infrastructure/development/environment/redis.env
      - ./infrastructure/development/environment/vault.env
      - ./infrastructure/development/environment/rabbitmq.env
      - ./infrastructure/development/environment/opensearch.env
    networks:
      - dev_machine_network
    volumes:
      - "./infrastructure/development/configuration/consul/import.sh:/import.sh"
    command:
      - /bin/sh
      - -c
      - /import.sh
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Sensitive data storage (Vault):
  vault:
    build: ./infrastructure/development/containers/vault
    env_file:
      - ./.env
      - ./infrastructure/development/environment/vault.env
    networks:
      - dev_machine_network
    volumes:
      - "./infrastructure/development/configuration/vault/config.yml:/vault/config/config.yml"
      - "vault-data:/vault/file"
    restart: always
    healthcheck:
      test: wget -q --spider http://localhost:8200/v1/sys/health >/dev/null || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5m
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Service discovery registration (Registrator):
  registrator:
    build: ./infrastructure/development/containers/registrator
    env_file:
      - ./.env
      - ./infrastructure/development/environment/registrator.env
    command: ["-internal", "consul://consul:8500"]
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock"
    restart: always
    networks:
      - dev_machine_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
  # Log collection service (Promtail): 
  promtail:
    build: ./infrastructure/development/containers/promtail
    env_file:
      - ./.env
      - ./infrastructure/development/environment/promtail.env
    networks:
      - dev_machine_network
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - "./infrastructure/development/configuration/promtail/config.yml:/etc/promtail/config.yml"
      - "/var/run/docker.sock:/var/run/docker.sock"
  # Developer's machine SOCKS proxy:
  socks-proxy:
    build: ./infrastructure/development/containers/go-socks5-proxy
    networks:
      - dev_machine_network
    ports:
      - "127.0.0.1:${PROXY_PORT}:1080"
    external_links:
      - traefik:application.jump
      - traefik:adminer.application.jump
      - traefik:agendash.application.jump
      - traefik:api.application.jump
      - traefik:clickhouse.application.jump
      - traefik:client.application.jump
      - traefik:consul.application.jump
      - traefik:grafana.application.jump
      - traefik:login.application.jump
      - traefik:metabase.application.jump
      - traefik:mongo-express.application.jump
      - traefik:minio.application.jump
      - traefik:opensearch-dashboards.application.jump
      - traefik:rabbitmq-management.application.jump
      - traefik:swagger.application.jump
      - traefik:traefik.application.jump
      - traefik:verdaccio.application.jump
      - traefik:views.application.jump
      - traefik:vault.application.jump
      - traefik:wiring.application.jump
      - traefik:xterm.application.jump

# Data and configuration directories:
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/postgres
  mongo-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/mongo
  clickhouse-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/clickhouse
  rabbitmq-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/rabbitmq
  minio-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/minio
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/redis
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/loki
  opensearch-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/opensearch
  verdaccio-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/verdaccio
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./.data/vault

# Developer's machine virtual network:
networks:
  dev_machine_network:
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1